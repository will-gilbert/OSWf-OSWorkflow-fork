<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE workflow SYSTEM 'OSWf-3.0.dtd'>

<workflow>

  <description><![CDATA[

    Based on the workflow 'LeaveRequest' this workflow implements the concept of
    Swimlanes where activities (oswf: actions) can only be executed by
    an actor with the appropriate authorization i.e. Role membership.

  ]]></description>

  <meta name='title'>Leave Request with Swimlanes</meta>

    <!--  List of possible starting points in the workflow ===============================  -->

	<initial-actions>
	
		<action id='1' name='Start'>

	    <description> 
	      Must be an employee to submit a request; Line Managers and HR Director are also employees.
	      Contractors are not employees and person no associated with a group.
	    </description>

	    <restrict-to>
	      <conditions>
				  <condition type='alias' name='hasRole'>
				  	<arg name='role'>Employees</arg>
			    </condition>
	       </conditions>
	    </restrict-to>
		    
			<results>
				<default-result step='100' owner='${actor}' />
			</results>

		</action>
	</initial-actions>


    <!-- Steps ============================================================================ -->
    
	<steps>
	
	    <!-- Employee submits a leave request  ================================= -->
	    
		<step id='100' name='Employee Request'>
			<actions>
				<action id='101' name='Request Leave'>

		      <pre-functions>
		        <function type='alias' name='setString'>
		          <arg name='name'>result</arg>
		          <arg name='value'>pending</arg>
		        </function>
		      </pre-functions>

					<results>
						<default-result split='10000' status='Requested'/>
					</results>
				</action>
			</actions>
		</step>


	  <!-- Manager approves or denies request based on labor needs  ========= -->
	    
		<step id='200' name='Line Manager Approval'>

			<!-- Line Managers can process requests but not for themselves -->
			<actions>
				<action id='201' name='Approve' >
					
				    <restrict-to>
				      <conditions>
								<condition type='alias' name='hasRole'>
								  <arg name='role'>Line Managers</arg>
						    </condition>
								<condition type='alias' negate='true' name='isStepOwner' />
				      </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status='Manager approved' status='joining' join='10000' />
					</results>
				</action>

				<action id='202' name='Deny' >
				  <restrict-to>
				    <conditions>

							<condition type='alias' name='hasRole'>
								<arg name='role'>Line Managers</arg>
						  </condition>

							<condition type='alias' negate='true' name='isStepOwner' />

				    </conditions>
				  </restrict-to>

					<results>
						<default-result exit-status='Manager denied' status='joining' join='10000'/>
					</results>
				</action>
			</actions>
		</step>

	    <!-- HR Manager approves or denies request based on employee record ==== -->

		<step id='300' name='HR Manager Approval'>

	    <!-- HR approve or deny requests but not there ownd  ========= -->
			<actions>
				<action id='301' name='HR Approve' >
				  <restrict-to>
				    <conditions>
							<condition type='alias' name='hasRole'>
								<arg name='role'>HR Director</arg>
					    </condition>
							<condition type='alias' negate='true' name='isStepOwner' />
				    </conditions>
				  </restrict-to>
					
					<results>
						<default-result exit-status='HR approved' status='joining' join='10000'/>
					</results>
				</action>

				<action id='302' name='HR Deny' >
				  <restrict-to>
				    <conditions>
							<condition type='alias' name='hasRole'>
								<arg name='role'>HR Director</arg>
						  </condition>
							<condition type='alias' negate='true' name='isStepOwner' />
				    </conditions>
				  </restrict-to>
					
					<results>
						<default-result exit-status='HR denied' status='joining' join='10000'/>
					</results>
				</action>
			</actions>
		</step>

	    <!-- System (auto) sends e-mail to employee and finished ========================== -->

		<step id='400' name='Notify employee'>

			<actions>
				<action id='401' name='Notify' auto='true' finish='true' >
					<results>
						<default-result status='Leave approval descision'/>
					</results>

				</action>

			</actions>

		</step>
	</steps>

  <!-- Splits =========================================================================== -->
  <!-- The leave approval goes to both the line manager and the HR manager ======= -->
    
	<splits>
		<split id='10000'>
			<default-result status='Descision Pending' step='200' owner='${actor}'/>
			<default-result status='Descision Pending' step='300' owner='${actor}'/>
		</split>
	</splits>


  <!-- Joins ============================================================================ -->
  <!-- The line manager and HR manager's decisions are combined here ============= -->

	<joins>
		<join id='10000'>
			<conditions>
				<condition type='groovy'>
					<arg name='script'><![CDATA[

						// Get both incoming step statuses; 'null' if the step has not yet arrived.

						def step200 = jn.get(200)?.getStatus()
						def step300 = jn.get(300)?.getStatus()

						// Ensure that both pathways from the split have arrived at the join
						//   before we can start evaluating any statuses

						if( step200 == null || step300 == null)
							return false

						// Both must approve
            if( step200 == 'Manager approved' && step300 == 'HR approved' ) {
                persistentVars.setString('result', 'approved')
                return true
            }

            // Either can deny
            if( step200 == 'Manger denied' || step300 == 'HR denied' ) {
                persistentVars.setString('result', 'denied')
            }
            
            // But we wait for both descisions before leaving the join
            !( step200 == 'Descision Pending' || step300 == 'Descision Pending')

                        
					]]></arg>
				</condition>
			</conditions>
			
			<default-result exit-status='JoinFinished' status='${result}' step='400'/>
			
		</join>
	</joins>
	
	
</workflow>