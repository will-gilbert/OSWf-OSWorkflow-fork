task usage doLast { println """   
==== U S A G E =====================================================================================

Modules:

     core - 
     store - 
     vars - 
     simulator -
     workflows - 
  
===============================================================================================


gradle :core:clean :core:test
gradle :store:clean :store:test
gradle :vars:clean :vars:test
gradle :simulator:clean :simulator:jettyRun



=================================================================================================
"""
}

subprojects {

    apply plugin: 'java'

    // Define version for all subprojects
    ext.groovy    = '2.4.11'  // Apr 2017
    ext.bsh       = '1.3.0'
    ext.slf4j     = '1.7.25'
    ext.log4j     = '1.2.17'
    ext.junit     = '4.12'
    ext.jndi      = '0.11.4.1'
    ext.wagon     = '2.12'
    
    ext.hibernate = '5.2.10.Final'
    ext.h2        = '1.4.195'
    ext.mysql     = '5.1.25'


    repositories {
        mavenLocal()     // User's local Maven repository e.g. SNAPSHOTs
        mavenCentral()   // Maven Central repositories
    }

    // Java SDK version,  Compiler flags
    sourceCompatibility = 1.8
    targetCompatibility = sourceCompatibility
    compileJava.options.compilerArgs = [
        // '-Xlint:unchecked', 
        // '-Xlint:deprecation'
    ]

    tasks.withType(Test) {

        // Display a green/red bar after the tests finish
        afterSuite { desc, result ->
            if (desc.parent == null) {
                // Green background for complete success, red for any failures
                print((result.resultType.toString() == 'SUCCESS') ? '\033[1;37m\033[1;42m' : '\033[1;37m\033[1;41m')
                print "Results: ${result.resultType} "
                print "(${result.testCount} tests, "
                print "${result.successfulTestCount} successes, "
                print "${result.failedTestCount} failures, "
                print "${result.skippedTestCount} skipped)"
                println '\033[0m'
            }
        }
    }
}


