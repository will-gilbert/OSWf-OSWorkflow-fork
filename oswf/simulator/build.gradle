task usage doLast { print """

gradle javaCompile
  Compile Java source code displaying warnings and error to the terminal console. Does not
  cross compile Java to JavaScript

gradle devMode
  Launched GWT DevMode which in turn can launch the default browser.  Does not cross compile
  the Java to JavaScript, rather, it creates hot complied environment such that changes to the
  Java client source can be incrementally recompiled.  Server side source code change need to
  be relaunched.  DevMode run an embedded version of Jetty. This is not related to the 'jettyRun'
  task

gradle clean jettyRun
gradle clean jettyRun -P db=<database>
  Cross compiles the client side Java into JavaScript; launches Jetty.  Use any browser to 
  connect to the localhost on the port defined by 'jettyRun.httpPort'. The default database
  is H2, an in-memory database. Local database configurations are set in the site specific
  'gradle.properties' file

gradle clean war -P db=<database> -P locality=remote
gradle clean war -P db=MySQL -P locality=MacBookAir
gradle clean war -P db=AWS -P locality=AWS
  Build a WAR for deployment.  Be sure to 'clean' after the WAR is deployed in order to
  reset the filtered property resources to their defaults.

gradle clean
  Delete working files in 'project.buildDir'; invokes 'cleanGWT' to remove the directory 
  used by the GWT DevMode environment

-----------------------------------------------------------------------------------------------
After running the simulator into a database you can execute the following SQL commands 
  to cleanup the OSWf & Property Set tables. NB: Execution order is important.

TRUNCATE TABLE xmldescriptor;
TRUNCATE TABLE processvariable;
TRUNCATE TABLE historystep;
TRUNCATE TABLE currentstep;
DELETE FROM processinstance;

""" }

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
//apply plugin: 'org.akhikhl.gretty'
apply plugin: 'jetty'
apply plugin: 'war'


buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
  }

  dependencies {
    classpath "org.akhikhl.gretty:gretty:$gretty"
  }
}


// C O N F I G U R A T I O N ------------------------------------------------------------------

// Project Configuration ----------------------------------------------------------------------

group = 'org.informagen.oswf'
version = '1.0.0'

ext.applicationName = "OSWf Simulator"


// GWT Configuration
ext.gwtModuleXML = 'org.informagen.oswf.simulator.Application' // Path to module descriptor
ext.gwtModule    = 'app'                                       // 'rename-to' within module descriptor
ext.gwtRunTarget = 'index.html'                                // HTML launching file
ext.gwtBuildDir  = "${buildDir}-gwt"                           // GWT build directory

// GWT and Java Compilers Configuration -------------------------------------------------------

// Dont't add Java compiled client side classes to the WAR
ext.excludedClasses = [
 '**/simulator/client/**',
 '**/simulator/public/**',
 '**/simulator/Application.gwt.xml'
]

// We aren't using these skins or SmartGWT tools
ext.excludedResources = [ 
  'WEB-INF/deploy',
//   gwtModule + '/sc/skins/Enterprise',
//   gwtModule + '/sc/skins/EnterpriseBlue',
//   gwtModule + '/sc/skins/ToolSkin',
//   gwtModule + '/tools'
]


// Properties Configuration -------------------------------------------------------------------
// Re: locality.properties, log4j.properties, <database>.hibernate.xml

ext.log4jProperties = [
    'log4j.logger'  : findProperty('log4j.logger') ?: 'CONSOLE',
    'log4j.pathname': findProperty('log4j.pathname') ?: '.'
]

// Get there properties from the command line
ext.hibernateDatabase = findProperty('db') 
ext.locality = findProperty('locality') ?: 'local'

// Use the command line property 'db' to load the intended set of properties from 
//  the 'gradle.properties' file
ext.hibernateProperties = [
    'hibernate.connection.driver_class': findProperty(hibernateDatabase + '.connection.driver_class') ?: 'org.h2.Driver',
    'hibernate.dialect'                : findProperty(hibernateDatabase + '.dialect') ?: 'org.hibernate.dialect.H2Dialect',
    'hibernate.connection.url'         : findProperty(hibernateDatabase + '.connection.url') ?: 'jdbc:h2:mem:workflow;DB_CLOSE_ON_EXIT=FALSE',
    'hibernate.hbm2ddl.auto'           : findProperty(hibernateDatabase + '.hbm2ddl.auto') ?: 'create-drop',
    'hibernate.connection.autocommit'  : findProperty(hibernateDatabase + '.connection.autocommit') ?: 'false',
    'hibernate.connection.username'    : findProperty(hibernateDatabase + '.connection.username') ?: 'sa',
    'hibernate.connection.password'    : findProperty(hibernateDatabase + '.connection.password') ?: '',
    'hibernate.connection.pool_size'   : findProperty(hibernateDatabase + '.connection.pool_size') ?: '2'
]


ext.localityProperties = [
    'application.version'            : project.version,
    'application.name'               : applicationName,
    'gwtModule'                      : gwtModule,
    'project.version'                : project.version,
    'project.name'                   : applicationName,
    'user.agent'                     : (locality == 'local') ? 'safari' : 'gecko1_8,safari,ie8,ie9,opera',
    'deployment.name'                : findProperty('deployment.name') ?: 'localhost',
    'servlet.janitor.repeatInterval' : findProperty('servlet.janitor.repeatInterval') ?: '30',
    'servlet.janitor.leakWarning'    : findProperty('servlet.janitor.leakWarning') ?: '3',
    'executable.graphviz'            : findProperty(locality + '.executable.graphviz') ?: 'dot' 
]



// R e p o s i t o r i e s   &   D e p e n d e n c i e s --------------------------------------

configurations { [gwtCompile] }

configurations.compile.resolutionStrategy { 
    cacheChangingModulesFor 0, 'seconds'
}


repositories {
    mavenLocal()                                       // User's local
    mavenCentral()                                     // Maven Central repository; GWT
}

dependencies {

    // Dependency Versions
    def gwtSDK    = '2.8.1'
    def smartGWT  = '6.1-LPGL'   // was 3.1, 4.0 ; 4.1, 5x no go
    def gin       = '1.5.0'
    def guice     = '4.1.0'

    compile project(':core')
    compile project(':vars')
    compile project(':store')
    compile project(':workflows')

    // Isomorphic SmartGWT ==========================================
    // Download the LGPL versions from http://www.smartclient.com/product/download.jsp
    // into the 'lib'. Specify the version using the Project version above.

    compile files(
        "lib/SmartGWT-${smartGWT}/smartgwt.jar", 
        "lib/SmartGWT-${smartGWT}/smartgwt-skins.jar"
    )


    compile ([
                
        // Google GWT
        "com.google.gwt:gwt-user:$gwtSDK",
        "com.google.gwt:gwt-dev:$gwtSDK", 
        
        // Google Dependency Injection
        "com.google.gwt.inject:gin:$gin",
        "com.google.inject:guice:$guice",

        // Hibernate 3.x
        "org.hibernate:hibernate-core:$hibernate",

        // Simple Logging Facade for Java    
        'org.slf4j:slf4j-api:$slf4j',
        
        // J2EE Servlet
        // "javax.servlet:servlet-api:2.4",

    ])
    
    runtime ([
    
        // Hibernate - runtime, needs cglib v2.2.2 with Guice
        'cglib:cglib:2.2.2',
        
        // BeanShell - used by Workflow Descriptions for step/action scripts
        "bsh:bsh:$bsh",
        
        // Logging Runtime 
        "org.slf4j:slf4j-log4j12:1.6.1",
        "log4j:log4j:1.2.16",

        // C3P0 - Connection Pooling  
        "org.hibernate:hibernate-c3p0:$hibernate",

        // Various database drivers; Add or remove accordingly
        "mysql:mysql-connector-java:$mysql",
        "com.h2database:h2:$h2"
        
    ])

    // Libraries used by GWT DevMode and GWT Compile but not for production or testing
    gwtCompile([
        "com.google.gwt:gwt-servlet:$gwtSDK",
        "com.google.gwt:gwt-codeserver:$gwtSDK",
    ])

    testCompile([
        "junit:junit:4.10",
    ])

    testRuntime([

         // Use log4j as the Logger
         'org.slf4j:slf4j-log4j12:1.6.4',
         'log4j:log4j:1.2.16',
    ])


}




// G W T   T A S K S --------------------------------------------------------------------------

task compileGWT(dependsOn: ['compileJava', 'copyWebAppResources'], type:JavaExec) {

    description ='Cross compiles Java into JavaScript for each browser specified'

    // Don't invoke GWT compiler if no source code has changed; 
    //  Gradle Goodness at work here!!

    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir new File("${gwtBuildDir}/${gwtModule}")

    // Define the properties for the 'JavaExec' task
    main ='com.google.gwt.dev.Compiler'
    jvmArgs = ['-Xmx1024M']                 // Memory, increase for larger Apps

    classpath = files([
        sourceSets.main.java.srcDirs,      // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath,  // Contains .gwt.xml file
        configurations.gwtCompile.files    // Contains the GWT compiler JAR
    ])

    args = [ "-war", gwtBuildDir,  gwtModuleXML]

}



task devMode(dependsOn: ['compileJava', 'copyWebAppResources', 'copyLibraries'], type:JavaExec) {

    description = "Launches the 'devMode' environment"

    main ='com.google.gwt.dev.DevMode'
    
    jvmArgs = [
      '-Xmx1024M',                     // Memory, increase for larger Apps
      '-Dgwt.nowarn.webapp.classpath'  // Supress DevMode console warnings
    ]  

    classpath = files([
        sourceSets.main.java.srcDirs,      // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath,  // Contains .gwt.xml file
        configurations.gwtCompile.files    // Contains the GWT compiler JAR
    ])

    args = [ "-startupUrl", gwtRunTarget,  "-war", gwtBuildDir,  gwtModuleXML]
}



// U T I L I T Y   T A S K S  =================================================================

task copyWebAppResources(type:Copy) {
    description = 'Copies resources into the "devMode" directory'

    // // Modify the web.xml file to provide name and version in the Servlet display
    // from('src/main/webapp') {
    //     include '**/web.xml'
    //     filter(ReplaceTokens, 
    //            tokens:[version: project.version, name: applicationName ])
    // }

    // // Copy the other unmodified files as well
    // from('src/main/webapp') {
    //    exclude '**/web.xml'
    //    filter(ReplaceTokens, tokens: localityProperties)
    // } into gwtBuildDir

}    


task copyLibraries(type:Copy) {
    description = 'Copies server side libraries into the "devMode" WEB-INF/lib directory'
    from (sourceSets.main.runtimeClasspath) { include '**/*.jar'}
    into "${gwtBuildDir}/WEB-INF/lib"
}


task cleanGWT(type:Delete) {
    description = 'Cleans the \'Development Mode\' JavaScript directory; does not delete webapp resources'
    delete = [
        "${gwtBuildDir}/${gwtModule}", 
        "${gwtBuildDir}/WEB-INF/deploy",
        "${gwtBuildDir}/WEB-INF/lib",
        'gwt-unitCache'
    ]   
}

task cleanDevMode(type:Delete) {
    delete gwtBuildDir  
    delete 'gwt-unitCache'  
}


// W E B   C O N T A I N E R   C O N F I G U R A T I O N ======================================

// Hide when running Gradle 4.0

jettyRun { dependsOn 'compileGWT' }
jettyRun.httpPort = 9090           // Avoid potential conflicts with 8080
jettyRun.doFirst {
    println """
    |==================================================================================
    |
    | Jetty running, open a browser and enter the URL->   
    |
    |      http://localhost:${jettyRun.httpPort}/${project.name}/${gwtRunTarget}
    |
    | macOS: Command-"Double Click" on the url
    | Ctrl-C or Command-Period to quit
    |
    """.stripMargin()
}



// P L U G I N   C O N F I G U R A T I O N ====================================================

// Must execute the 'compileGWT' task before 'war' and 'jettyRun';  By adding a 'dependsOn'
//   to the 'war' and 'jettyRun' task configuration we don't have to remember to do this
//   on the command line.  Same idea with the 'clean' task to clean up the 'devMode' directory

// WAR and Jetty builds; requires results of 'compileGWT' task rather than 'src/main/webapp'

webAppDirName = "${gwtBuildDir}"

war {dependsOn 'compileGWT'}

clean { dependsOn 'cleanDevMode'}



// Custom build our WAR in order to remove GWT compiler and unused SmartGWT resources and skins

war {

    // Undefine the default 'war' classpath; we'll build our own
    classpath = [] 

    // Copy everything except the excluded classes and the jars which are going into 'lib'
    from (sourceSets.main.runtimeClasspath) {
        into 'WEB-INF/classes'
        excludes = excludedClasses
        exclude  '*.jar'

    }

    // Put all of the JAR files into 'lib' except those used by the GWT DevMode and
    //   the Java/JavaScript cross compiler
    from (sourceSets.main.runtimeClasspath) {
        into 'WEB-INF/lib'
        include '*.jar'
        exclude  'gwt-dev-*.jar'
        exclude  'gwt-user-*.jar'
    }

    // Exclude resources which we don't want in the WAR
    excludes = excludedResources
}


// Augment the 'processResources' task from the 'java' plugin.  Use filtering to replace 
//   '@...@' tags with properties in order to customize the running environment

processResources {
    filter(ReplaceTokens, tokens: log4jProperties)
    filter(ReplaceTokens, tokens: hibernateProperties)
    filter(ReplaceTokens, tokens: localityProperties)
}




