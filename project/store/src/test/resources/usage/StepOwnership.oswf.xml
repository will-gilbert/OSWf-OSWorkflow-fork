<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow SYSTEM "OSWf-3.0.dtd">


<workflow>

  <meta name="title">Step Ownership</meta>
  <meta name="description"><![CDATA[
	
    Based on the workflow 'ActionRestrictions', this workflow uses the 'owner' field
    to pass the 'Group' attribute to the Action restriction.  The advantage of this
    approach is that 'Work Lists' can be created from the 'CurrentSteps' database table.

    NB: Although this example uses OSUser Groups, an 'owner' can define a required role
    the Work list handler can then enforce action selection or  OSWorkflow Conditions 
	could be written to enforce allowing actions.
    
    Another important observation, setting the 'owner' attribute of a Step has no effect on
    which 'actor' is allowed to execute actions within the step. In the end the only 
    restrictions which apply are 'action' restrictions.

    Querying with either JDBC or WorkflowExpressionQuery can be used to build a 'Work List'
    of available process instances for a role, group, or user.  The 'owner' workflow field
	can be used for this purpose.
	
  ]]></meta>

    <!--  List of possible starting points in the workflow ===============================  -->

	<initial-actions>
	
		<action id="1" name="Start">

		    <!-- Must be an employee to submit a request; Line Managers and HR Director are employees too -->
		    <restrict-to>
		        <conditions type="AND">
					<condition type="class">
						<arg name="class.name">org.informagen.oswf.conditions.HasRole</arg>
						<arg name="role">Employees</arg>
				    </condition>
		        </conditions>
		    </restrict-to>

			<results>
				<default-result step="100" status="Underway" owner="Employees"/>
			</results>
		</action>
	</initial-actions>


    <!-- Steps ============================================================================ -->
    
	<steps>
	
	    <!-- Employee submits a leave request  ================================= -->
	    
		<step id="100" name="Employee Request">
			<actions>
				<action id="101" name="Request Leave">
					<results>
						<default-result split="10000" status="Requested"/>
					</results>
				</action>
			</actions>
		</step>


	    <!-- Manager approves or denies request based on labor needs  ========= -->
	    
		<step id="200" name="Line Manager Approval">

			<actions>
				<action id="201" name="Approve" >
					
				    <!-- Line Managers and HR Directors can approve requests -->
				    <restrict-to>
				        <conditions type="AND">
							<condition type="class">
								<arg name="class.name">org.informagen.oswf.conditions.HasRole</arg>
								<arg name="role">Line Managers</arg>
						    </condition>
				        </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status="Manager approved" status="joining" join="10000" />
					</results>
				</action>

				<action id="202" name="Deny" >
				    <!-- Line Managers and HR Directors can approve requests -->
				    <restrict-to>
				        <conditions type="AND">
							<condition type="class">
								<arg name="class.name">org.informagen.oswf.conditions.HasRole</arg>
								<arg name="role">Line Managers</arg>
						    </condition>
				        </conditions>
				    </restrict-to>
					<results>
						<default-result exit-status="Manager denied" status="joining" join="10000"/>
					</results>
				</action>
			</actions>
		</step>

	    <!-- HR Manager approves or denies request based on employee record ==== -->

		<step id="300" name="HR Manager Approval">

			<actions>
				<action id="301" name="HR Approve" >
					
				    <!-- Only HR Directors can approve requests -->
				    <restrict-to>
				        <conditions type="AND">
							<condition type="class">
								<arg name="class.name">org.informagen.oswf.conditions.HasRole</arg>
								<arg name="role">HR Director</arg>
						    </condition>
				        </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status="HR approved" status="joining" join="10000"/>
					</results>
				</action>

				<action id="302" name="HR Deny" >
					
				    <!-- Only HR Directors can approve requests -->
				    <restrict-to>
				        <conditions type="AND">
							<condition type="class">
								<arg name="class.name">org.informagen.oswf.conditions.HasRole</arg>
								<arg name="role">HR Director</arg>
						    </condition>
				        </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status="HR denied" status="joining" join="10000"/>
					</results>
				</action>
			</actions>
		</step>

	    <!-- System sends e-mail to employee =================================== -->

		<step id="400" name="Notify employee">

			<actions>
				<action id="401" name="Notify" auto="true" finish="TRUE" >
					<results>
						<default-result status="Line approval"/>
					</results>

				</action>

			</actions>

		</step>
	</steps>

    <!-- Splits =========================================================================== -->

    <!-- The leave approval goes to both the line manager and the HR manager ======= -->
    
	<splits>
		<split id="10000">
			<default-result status="Underway" step="200" owner="Line Managers"/>
			<default-result status="Underway" step="300" owner="HR Director"/>
		</split>
	</splits>


    <!-- Joins ============================================================================ -->

    <!-- The line manager and HR manager's decisions are combined here ============= -->
	<joins>
		<join id="10000">
			<conditions type="AND">
				<condition type="beanshell">
					<arg name="script"><![CDATA[
					
                        propertySet.setString("result", "denied");
                        
                        if(jn.get(200).getStatus().endsWith("approved") && 
                           jn.get(300).getStatus().endsWith("approved")) {
                            propertySet.setString("result", "approved");
                        }
                        
                        // Final result
                        !("Underway".equals(jn.get(200).getStatus())) && 
                        !("Underway".equals(jn.get(300).getStatus()));
                        
					]]></arg>
				</condition>
			</conditions>
			
			<default-result exit-status="JoinFinished" status="${result}" step="400"/>
			
		</join>
	</joins>
	
	
</workflow>