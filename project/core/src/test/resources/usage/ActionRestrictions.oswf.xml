<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow SYSTEM "OSWf-3.0.dtd">

<workflow>

  <meta name="title">LeaveRequest with Swimlanes</meta>
  <meta name="description"><![CDATA[
    Based on the workflow 'LeaveRequest' this workflow implements the concept of
    Swimlanes where activities (oswf: actions) can only be executed by
    an actor with the appropriate authorization i.e. Rolemembership.
  ]]></meta>

    <!--  List of possible starting points in the workflow ===============================  -->

	<initial-actions>
	
		<action id="1" name="Start">

		    <!-- Must be an employee to submit a request; Line Managers and HR Director are employees too -->
		    <!-- Contractors are not employees and person no associated with a group                      -->
		    <restrict-to>
		        <conditions>
					<condition type='alias' name='hasRole'>
						<arg name='role'>Employees</arg>
				    </condition>
		        </conditions>
		    </restrict-to>
		    
			<results>
				<default-result step="100" status="Underway" owner='${actor}' />
			</results>
		</action>
	</initial-actions>


    <!-- Steps ============================================================================ -->
    
	<steps>
	
	    <!-- Employee submits a leave request  ================================= -->
	    
		<step id="100" name="Employee Request">
			<actions>
				<action id="101" name="Request Leave">
					<results>
						<default-result split="10000" status="Requested"/>
					</results>
				</action>
			</actions>
		</step>


	    <!-- Manager approves or denies request based on labor needs  ========= -->
	    
		<step id="200" name="Line Manager Approval">

			<!-- Line Managers can process requests but not for themselves -->
			<actions>
				<action id="201" name="Approve" >
					
				    <restrict-to>
				        <conditions>
							<condition type='alias' name='hasRole'>
								<arg name='role'>Line Managers</arg>
						    </condition>
							<condition type='alias' negate='true' name='isStepOwner' />
				        </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status="Manager approved" status="joining" join="10000" />
					</results>
				</action>

				<action id="202" name="Deny" >
				    <restrict-to>
				        <conditions>
							<condition type='alias' name='hasRole'>
								<arg name='role'>Line Managers</arg>
						    </condition>
							<condition type='alias' negate='true' name='isStepOwner' />
				        </conditions>
				    </restrict-to>
					<results>
						<default-result exit-status="Manager denied" status="joining" join="10000"/>
					</results>
				</action>
			</actions>
		</step>

	    <!-- HR Manager approves or denies request based on employee record ==== -->

		<step id="300" name="HR Manager Approval">

	    <!-- HR approve or deny requests but not there ownd  ========= -->
			<actions>
				<action id="301" name="HR Approve" >
				    <restrict-to>
				        <conditions>
							<condition type='alias' name='hasRole'>
								<arg name='role'>HR Director</arg>
						    </condition>
							<condition type='alias' negate='true' name='isStepOwner' />
				        </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status="HR approved" status="joining" join="10000"/>
					</results>
				</action>

				<action id="302" name="HR Deny" >
				    <restrict-to>
				        <conditions>
							<condition type='alias' name='hasRole'>
								<arg name='role'>HR Director</arg>
						    </condition>
							<condition type='alias' negate='true' name='isStepOwner' />
				        </conditions>
				    </restrict-to>
					
					<results>
						<default-result exit-status="HR denied" status="joining" join="10000"/>
					</results>
				</action>
			</actions>
		</step>

	    <!-- System sends e-mail to employee =================================== -->

		<step id="400" name="Notify employee">

			<actions>
				<action id="401" name="Notify" auto="true" finish="TRUE" >
					<results>
						<default-result status="Line approval"/>
					</results>

				</action>

			</actions>

		</step>
	</steps>

    <!-- Splits =========================================================================== -->

    <!-- The leave approval goes to both the line manager and the HR manager ======= -->
    
	<splits>
		<split id="10000">
			<default-result status="Underway" step="200" owner="${actor}"/>
			<default-result status="Underway" step="300" owner="${actor}"/>
		</split>
	</splits>


    <!-- Joins ============================================================================ -->

    <!-- The line manager and HR manager's decisions are combined here ============= -->
	<joins>
		<join id="10000">
			<conditions>
				<condition type="beanshell">
					<arg name="script"><![CDATA[
					
                        typedMap.setString("result", "denied");
                        
                        if(jn.get(200).getStatus().endsWith("approved") && 
                           jn.get(300).getStatus().endsWith("approved")) {
                            typedMap.setString("result", "approved");
                        }
                        
                        // Final result
                        !("Underway".equals(jn.get(200).getStatus())) && 
                        !("Underway".equals(jn.get(300).getStatus()));
                        
					]]></arg>
				</condition>
			</conditions>
			
			<default-result exit-status="JoinFinished" status="${result}" step="400"/>
			
		</join>
	</joins>
	
	
</workflow>